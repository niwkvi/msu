------------------------------------------------------------------------------------------------------------------------

Иничкина Наталья
М1-19

Документация
#4
Метод Гаусса-Жордана с выбором главного элемента по строке

------------------------------------------------------------------------------------------------------------------------

План
- Описание метода
    - Метод Гаусса-Жордана
    - Выбор главного элемента по строке
- Описание программы
    - main_lss_17_04.c
    - lss_17_04.c

------------------------------------------------------------------------------------------------------------------------

Описание метода

------------------------------------------------------------------------------------------------------------------------

Метод Гаусса-Жордана

------------------------------------------------------------------------------------------------------------------------

Пусть дана система линейных уравнений вида Ax=b.
A - квадратная матрица размерности nxn
x - вектор неизвестных значений длины n
b - вектор-столбец длины n

Матрица системы преобразуется к единичной матрице при помощи формул

a^(k)_(kj)=a^(k-1)_(kj)/a^(k-1)_(kk)
b^(k)_k=b^(k-1)_k/a^(k-1)_(kk)
j=2,..,n

a^(k)_(ij)=a^(k-1)_(ij)-a^(k-1)_(ik)a^(k)_(kj)
b^(k)_i=b^(k-1)_i-a^(k-1)_(ik)b^(k)_k
i=1,..,n
j=2,...,n
i!=k

После чего правая часть системы будет содержать искомое решение

x_i=b^(n)_i
i=1,..,n

------------------------------------------------------------------------------------------------------------------------

Выбор главного элемента по строке

------------------------------------------------------------------------------------------------------------------------

С целью понижения вычислительной погрешности вводится понятие выбора главного элемента.
В каждой строке выбирается элемент с наибольшим по модулю коэффициентом при нем и
выполняется перенумерация, при которой выбранному элементу в первой строке присваивается номер 1,
во второй - 2 и т.д.

------------------------------------------------------------------------------------------------------------------------

Описание программы

------------------------------------------------------------------------------------------------------------------------

main_lss_17_04.c

------------------------------------------------------------------------------------------------------------------------

В данном файле содержатся следующие функции:
    int main(int argc, char *argv[]);
    void input();
    void output(int ans);
    void parse_command_line(int argc, char *argv[]);
    int len(const char *str);
    void print_help();
    void print_execution_time(clock_t time_start, clock_t time_end);
    void print_matrix();
    void mem_alloc();
    void mem_free();
    void errors(int error_id);


Также глобально объявлены следующие переменные:
    int n - количество уравнений в системе, считываемое из входного файла
    double *A - массив матрицы А, считываемый из входного файла
    double *B - массив вектора b, считываемый из входного файла
    double *X - массив вектора x, в который в процессе решения будут записываться ответы
    double *tmp - дополнительная память, передающаяся в lss_17_04
    int flag_errors - флаг для печати ошибок
    int flag_matrix - флаг для печати матрицы A и вектора b
    int flag_time - флаг для печати общего времени
    char *in_filename - имя входного файла (по умолчанию - lss_17_04_in.txt)
    char *out_filename - имя выходного файла (по умолчанию - lss_17_04_out.txt)


Формат данных во входном файле:
    n
    a_1_1 a_1_2 ... a_1_n
    a_2_1 a_2_2 ... a_2_n
    .....................
    a_n_1 a_n_2 ... a_n_n
    b_1
    b_2
    ...
    b_n

    n - количество уравнений
    a_i_j - элементы матрицы A
    b_i - элементы вектора b


Формат данных в выходном файле:
    n
    x_1
    x_2
    ...
    x_n

    n - количество неизвестных в системе
    x_i - значения неизвестных, удовлетворяющих системе

    Если решения не существует, то файл содержит единственную цифру 0.


Образец синтаксиса вызова программы:
    Usage: lss [input_file_name] [output_file_name] [options]
    Where options include:
      -d        print debug messages [default OFF]
      -e        print errors [default OFF]
      -p        print matrix [default OFF]
      -t        print execution time [default OFF]
      -h, -?    print this and exit
    Default input_file_name value is lss_00_00_in.txt, default output_file_name value is lss_00_00_out.txt.

    input_file_name - имя входного файла
    output_file_name - имя выходного файла
    options - опции:
        -d - печать отладочных сообщений
        -e - печать ошибок
        -p - печать матриц
        -t - печать общего времени выполнения
        -h, -? - печать вышеприведенного вспомогательного сообщения и выход из программы


int main(int argc, char *argv[]);
    Вызывает парсер командной строки, считывание входных данных, функцию-решатель, распечатку выходных данных,
    освобождение памяти, подсчет общего времени.
Аргументы:
    argc - количество аргументов программы
    argv - массив аргументов программы
Возвращаемые значения:
    0 - работа завершена успешно и решение простроено
    1 - работа завершена успешно и решения системы не существует
    -1 - метод решения не применим к данной системе (для алгоритма, используемого в данной задаче, не понадобится)
    С помощью exit():
    -2 - ошибка выделения памяти
    -3 - ошибка в вызове программы
    -4 - ошибка в считывании входных данных
    -5 - ошибка в печати выходных данных
    -6 - завершение работы программы при наличии аргументов -h или-? при вызове программы


void input();
    Выполняет открытие входного файла, считывание входных данных - n, A, b, вызывает выделение памяти.
Аргументы:
    Отсутствуют
Возвращаемые значения:
    С помощью exit():
    -4 - ошибка в считывании входных данных


void output(int ans);
    Выполняет открытие выходного файла, печать выходных данных -
    либо n, X, либо 0 (если ans = 0, то есть решения системы не существует)
Аргументы:
    ans - результат работы решающей функции {0, 1, -1}
Возвращаемые значения:
    С помощью exit():
    -5 - ошибка в печати выходных данных


void parse_command_line(int argc, char *argv[]);
    Выполняет парсинг командной строки. Принимает опции -d, -e, -p, -t, -h, -?,
    либо вызывая соответствующие функции,
    либо устанавливая соответствующие флаги. При наличии подаваемых имен входного или выходного файлов
    изменяет имена файлов по умолчанию.
Аргументы:
    argc - количество аргументов программы
    argv - массив аргументов программы
Возвращаемые значения:
    С помощью exit():
    -3 - ошибка в вызове программы
    -6 - завершение работы программы при наличии аргументов -h или-? при вызове программы


int len(const char *str);
    Выполняет подсчет количества символов в подаваемой строке.
Аргументы:
    str - строка
Возвращаемые значения:
    count - количество символов в строке


void print_help();
    Выводит на экран вспомогательное сообщение о программе.
Аргументы:
    Отсутствуют
Возвращаемые значения:
    Отсутствуют


void print_execution_time(clock_t time_start, clock_t time_end);
    Выводит на экран общее время работы программы.
Аргументы:
    time_start - время начала работы программы
    time_end - время окончания работы программы
Возвращаемые значения:
    Отсутствуют


void print_matrix();
    Выводит на экран последовательно матрицу A и вектор b.
Аргументы:
    Отсутствуют
Возвращаемые значения:
    Отсутствуют


void mem_alloc();
    Выполняет выделение памяти для A, B, X, tmp.
Аргументы:
    Отсутствуют
Возвращаемые значения:
    С помощью exit():
    -2 - ошибка выделения памяти


void mem_free();
    Выполняет освобождение памяти для A, B, X, tmp.
Аргументы:
    Отсутствуют
Возвращаемые значения:
    Отсутствуют


void errors(int error_id);
    Выводит на экран сообщения об ошибках.
Аргументы:
    error_id - номер ошибки
Возвращаемые значения:
    Отсутствуют

------------------------------------------------------------------------------------------------------------------------

lss_17_04.c

------------------------------------------------------------------------------------------------------------------------

В данном файле содержатся следующие функции:
    size_t lss_memsize_17_04(int n);
    int lss_17_04(int n, double *A, double *B, double *X, double *tmp);


Также глобально объявлена константа:
    const double EPS = 1e-8;


size_t lss_memsize_17_04(int n);
    Задает размер дополнительной памяти tmp,
    равный n * sizeof(double), будет использоваться
    для запоминания индексов главных элементов строк.
Аргументы:
    n - количество уравнений в системе
Возвращаемые значения:
    n * sizeof(double) - размер дополнительной памяти tmp


int lss_17_04(int n, double *A, double *B, double *X, double *tmp);
    Реализовывает метод Гаусса-Жордана с выбором главного элемента по строке.

    Дополнительная память tmp, являющаяся массивом длины n, в результате выполнения программы
    будет на i позиции содержать индекс главного элемента в строке i. Если главного элемента в строке
    не найдено (в строке все элементы равны 0), то на соответствующей позиции будет записано -1.

    Сначала в цикле выполняется проход по всем строкам матрицы A.
    На каждой итерации цикла (в каждой строке) выполняется поиск главного элемента:
        - сначала в качестве главного элемента берется модуль первого элемента строки
        с сохранением его позиции - 0
        - далее вторым циклом выполняется проход по всем остальным элементам данной строки,
        при нахождении элемента, который по модулю больше модуля текущего главного элемента,
        он становится новым главным элементом с сохранением новой позиции
        - если в текущей строке главным элементом становится число 0 и
        при этом соответствующий коэффициент в векторе b не равен 0, то решения системы не существует и
        программа возвращает 1
        - если в текущей строке главным элементом становится число 0, но при этом
        соответствующий коэффициент в векторе b тоже равен 0, то на соответствующей позиции в
        tmp будет записано -1, после чего программа пропустит все дальнейшие операции с данной строкой
        - если найденный главный элемент строки не равен 0:
            - все элементы данной строки делятся на него
            - соответствующий коэффициент из вектора b тоже делится на него
            - циклом выполняется проход по всем строкам, кроме рассматриваемой на данный момент, в котором
            по формулам, приведенным выше в данном файле, выполняется зануление элементов из других строк, находящихся
            в том же столбце, что и текущий главный элемент данной строки
            - на соответствующую позицию в tmp сохраняется индекс главного элемента в рассматриваемой строке

    В результате работы данного цикла в массиве tmp сохранятся все индексы главных элементов, а
    сама матрица A превратится в единичную, но без перестановки столбцов, то есть сохранение позиций в tmp
    позволит в дальнейшем сопоставить единицам в данной матрице соответствующие ответы в векторе b.

    Если система была недоопределенной, то свободные переменные останутся равными 0.

    В еще одном цикле будет выполнена запись в массив X ответов, то есть соответствующих коэффициентов из вектора b.

    А также при наличии флага для печати отладочных сообщений будет выполнен вывод на экран сообщений о
    текущем положении работы программы и времени, прошедшего с начала работы.

Аргументы:
    A - массив матрицы А
    B - массив вектора b
    X - массив вектора x, в который в процессе решения будут записываться ответы
    tmp - дополнительная память
Возвращаемые значения:
    0 - работа завершена успешно и решение простроено
    1 - работа завершена успешно и решения системы не существует

------------------------------------------------------------------------------------------------------------------------
